searchState.loadedDescShard("ecdsa_proof", 0, "This is a simple implementation of the work done by Ubique …\nA BBSPresentation is a proof of knowledge of the …\nA Closed commitment is stripped of its random value and …\nAn ECDSAProof links the ECDSA signature from the …\nThe Issuer represents here the government issuer in Swiyu, …\nThe MobilePhone represents a holder. It has:\nAn Open commitment includes the random value, which is the …\nUse an enum to show that the commitments can be open, …\nGlobally known public values. These values can be created …\nA SecureElement keypair, with the private key stored in the\nThe SecureElement is a specially hardened part of the …\nA simple representation of the Swiyu app. It needs to be …\nA VerifiedCredential is created by the Issuer and holds …\nA Verifier in this demo only has to create random …\nThe VerifierMessage is used both for the signature from the\nAdd a VerifiedCredential. In this simple implementation, …\nReturns the affine, public, value of this commitment, …\nMake sure the BBSPresentation is closed - a better version …\nMake sure the commitment has been closed.\nReturns a BBSPresentation which is a proof that the holder …\nChecks that the given BBSPresentation and ECDSAProof …\nClose the commitments by removing the random values.\nClose this commitment by discarding the random value. For …\nCreates a new keypair and stores the private key in the …\nReturns a time-based changing message which is used to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new commitment from a scalar. This returns an …\nReturns the certificate of the Issuer - in this case the …\nReeturns the string of the given message. Only works for …\nReturns the size of the BBS proof.\nReturns the sizes of the different proofs.\nFills in the Swiyu app - engineer humor…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the optional message_string at position <code>idx</code>. If …\nCreate a new issuer with a new keypair.\nA verifier needs the certificate of the Issuer to know how …\nCreates a new mobile phone with an empty SecureElement and …\nCreate a new Swiyu app. Of course the real app will do so …\nCreate a new proof that the public key stored in a …\nCreate a new message with some kind of domain separation.\nCreate a new PublicSetup. It can also be Cloned, or …\nCreates a new BBS credential using the coordinates of the …\nReturns the random value of this commitment. If the …\nAccess the SecureElement. This is mostly to avoid …\nSigns a message with the private key referenced by id. No …\nAccess the Swiyu app. This is mostly to avoid explaining …\nReturns the JSON string.\nReturns the json string of the structure.\nVerify that:\nVerifies that the commitments to the signature and the …\nECDSA signature\nReturns the argument unchanged.\nChosen generator of the group\nCalls <code>U::from(self)</code>.\nCreate new signature given that the message has already …\nVerify the signature given that the message has already …")